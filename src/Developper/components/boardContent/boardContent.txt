import './boardContent.scss';
import { initData } from '../../actions/initData';
import Column from '../column/column';
import { useState, useEffect, useRef } from 'react';
import _ from 'lodash';
import { mapOrder } from '../../utilities/sort';
import { Container, Draggable } from "react-smooth-dnd";
import { applyDrag } from '../../utilities/dragDrop';
import axios from 'axios';
import { useParams } from 'react-router-dom';
const BoardContent = () => {
    const { boardId } = useParams();
    
    const [board, setBoard] = useState({});
    const [columns, setColumns] = useState({});
    const [isShowAddList, setIsShowAddList] = useState(false);
    
    const [columnsOrder, setColumnsOrder] = useState([]);

    const inputRef = useRef(null);
    const [valueInput, setValueInput] = useState("");
    


    useEffect(() => {
        if (isShowAddList && inputRef.current) {
            inputRef.current.focus();
        }
    }, [isShowAddList]);

    // useEffect(() => {
    //     const boardInitData = initData.boards.find(item => item.id === 'board-1');
    //     if (boardInitData) {
    //         setBoard(boardInitData);
    //         setColumns(mapOrder(boardInitData.columns, boardInitData.columnOrder, 'id'));
    //     }
    // }, []);
  
    useEffect(() => {
        axios.get(`https://localhost:7125/ByBoard/${boardId}`)
            .then(response => {
                const fetchedColumns = response.data;
                setColumns(fetchedColumns);
                setColumnsOrder(fetchedColumns.map(column => column.id));
            })
            .catch(error => {
                console.error('Failed to fetch columns:', error);
            });
    }, [boardId]);
    const onColumnDrop = (dropResult) => {
        let newColumns = [...columns];
        newColumns = applyDrag(newColumns, dropResult);
        let newBoard = { ...board };
        console.log(newColumns);
        console.log(newBoard);
        newBoard.columnOrder = newColumns.map(column => column.id);
        newBoard.columns = newColumns;
        setColumns(newColumns);
        setBoard(newBoard);
    };

    const onCardDrop = (dropResult, columnId) => {
        if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {
            let newColumns = [...columns];
            let currentColumn = newColumns.find(column => column.id === columnId);
            currentColumn.cards = applyDrag(currentColumn.cards, dropResult);
            currentColumn.cardOrder = currentColumn.cards.map(card => card.id);
            setColumns(newColumns);
        }
    };
    const updateColumnOrder = async (newColumn) => {
        console.log('Updating column with:', newColumn);
    
        // Find the index of the column to update
        const columnIdUpdate = newColumn.id;
        let newCols = [...columns];
        let index = newCols.findIndex(item => item.id === columnIdUpdate);
    
        // Check if the column should be deleted
        if (newColumn._destroy) {
            newCols.splice(index, 1);
        } else {
            newCols[index] = newColumn;
        }
    
        // Update columns in the state
        setColumns(newCols);
    
        // Attempt to update the order of columns on the server after modifying a column
        try {
            console.log('Attempting to update column order on server:', newCols);
    
            // Validate input
            if (!Array.isArray(newCols)) {
                console.error('Invalid input: Expected an array.');
                alert('Invalid input: Expected an array.');
                return;
            }
    
            // Convert all elements in the array to strings
            let stringifiedColumnOrder = newCols.map(element => element.id.toString());
    
            console.log('Stringified column order:', stringifiedColumnOrder);
    
            // Send update request to server
            const response = await axios.patch(`https://localhost:7125/updateColumnOrder/${boardId}`, stringifiedColumnOrder);
            console.log('Update successful:', response.data);
        } catch (error) {
            console.error('Failed to update column order:', error);
            alert('Failed to update column order. Please try again.');
        }
    };
    

    
    
    
    const handleAddList = () => {
        if (!valueInput) {
            if (inputRef.current) {
                inputRef.current.focus();
            }
            return;
        }

        const newColumn = {
            title: valueInput,
            cardOrder: [], // Initially, no cards
            boardId: boardId // Assuming a fixed board ID or passed as props
        };
        console.log(newColumn);

        axios.post('https://localhost:7125/addcolumn', newColumn)
            .then(response => {
                const savedColumn = response.data;
                const updatedColumns = [savedColumn];
                setColumns(updatedColumns);
                const updatedColumnsOrder = [savedColumn.id];
                setColumnsOrder(updatedColumnsOrder); // Update columnsOrder with the new column's ID
                updateColumnOrder(updatedColumns.map(col => col.id)); 
                setValueInput(''); // Clear the input field after adding
                inputRef.current && inputRef.current.focus();
            })
            .catch(error => {
                console.error('Error adding new column:', error);
            });
    };
   

   
    return (
        <div className="board-columns">
           {columns && columns.length > 0 &&
    <Container
        orientation="horizontal"
        onDrop={onColumnDrop}
        getChildPayload={index => columns[index]}
        dragHandleSelector=".column-drag-handle"
        dropPlaceholder={{
            animationDuration: 150,
            showOnTop: true,
            className: 'column-drop-preview '
        }}
    >
        {columns.map((column, index) => (
            <Draggable key={column.id}>
                <Column
                    column={column}
                    onCardDrop={onCardDrop}
                    updateColumnOrder={updateColumnOrder}
                />
            </Draggable>
        ))}
    </Container>
}

            {isShowAddList ?
                <div className='content-add-column'>
                    <input type='text' className='form-control' ref={inputRef} value={valueInput} onChange={(event) => setValueInput(event.target.value)} />
                    <div className='group-btn'>
                        <button className='btn btn-success' onClick={handleAddList}>Add list</button>
                        <i className='fa fa-times icon' style={{color:"gray"}} onClick={() => setIsShowAddList(false)}></i>
                    </div>
                </div>
                :
                <div className='add-new-column' onClick={() => setIsShowAddList(true)}>
                    <i className='fa fa-plus icon'></i>Add another column
                </div>
            }
        </div>
    );
};

export default BoardContent;
